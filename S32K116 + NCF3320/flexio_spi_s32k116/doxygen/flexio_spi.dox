/*!
    @page flexio_spi_s32k116_group FLEXIO SPI
    @brief Example application showing FlexIO SPI driver usage

    ## Application description ##
    _____
    The purpose of this demo application is to show you the usage of the FlexIO SPI driver found
    on the S32K116 SoC using S32 SDK API.

    The application uses FlexIO SPI driver to make a data transfer of a defined size. The slave device for this example is a second FlexIO SPI driver using the same FlexIO instance, which is configured to act as a bus slave.
    The slave and master buffers will be checked after each transfer by the application, RED or GREEN led will be lit depending on the check result.

    ## Prerequisites ##
    _____
    To run the example you will need to have the following items:
    - 1 S32K116 board
    - 1 Power Adapter 12V (if the board can't be powered from the USB)
    - 4 Dupont male to male cable
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    _____
    The following boards are supported by this application:
    - S32K116EVB-Q048

    ## Hardware Wiring ##
    _____
    The following connections must be done to for this example application to work:

    PIN FUNCTION                    |S32K116EVB-Q048
    --------------------------------|---------------
    FLEXIO_MASTER MOSI  (\b PTD0)   | J1.5  - J1.7
    FLEXIO_MASTER MISO  (\b PTD1)   | J1.6  - J1.2
    FLEXIO_MASTER SCK   (\b PTA0)   | J2.10  - J3.10
    FLEXIO_MASTER SS    (\b PTA1)   | J2.9 - J3.12
    FLEXIO_SLAVE  MOSI  (\b PTD2)   | J1.7  - J1.5
    FLEXIO_SLAVE  MISO  (\b PTA3)   | J1.2  - J1.6
    FLEXIO_SLAVE  SCK   (\b PTE4)   | J3.10 - J2.10
    FLEXIO_SLAVE  SS    (\b PTE5)   | J3.12 - J2.9


    ## How to run ##
    _____
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b flexio_spi_s32k116. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b flexio_spi_s32k116). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Debugging the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be two debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b flexio_spi_s32k116_debug_flash_jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b flexio_spi_s32k116_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

*/

