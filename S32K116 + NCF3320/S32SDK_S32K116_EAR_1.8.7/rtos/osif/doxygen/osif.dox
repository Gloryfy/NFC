/**
@defgroup osif OS Interface (OSIF)
@brief OS Interface Layer (OSIF)

The OSIF layer is a minimal wrapper layer for common RTOS services, intended to be used
by SDK drivers and middlewares. I can be used by the user application, but it is not recommended.
The operations supported by OSIF:
 - mutex lock/unlock
 - semaphore post/wait
 - time delay and get time elapsed

OSIF currently comes in two variants: bare-metal and FreeRTOS. Steps to use each one are
described below.

## FreeRTOS ##

To integrate the FreeRTOS OSIF variant, two steps are necessary:
 - compile and link the osif_freertos.c file
 - define a project-wide compile symbol: USING_OS_FREERTOS

### FreeRTOSConfig.h dependencies ###

FreeRTOS configuration file needs to have these options activated:
 - INCLUDE_xQueueGetMutexHolder
 - INCLUDE_xTaskGetCurrentTaskHandle

### Hardware resources ###

FreeRTOS OSIF uses the FreeRTOS API and services, does not use any additional hardware
or software resources.

### FreeRTOS supported platforms ###

The SDK platforms supported by FreeRTOS can be found in the following table. If a platform is
supported by FreeRTOS, both osif variants, bare-metal and freertos, are supported. If the platform
is not supported by FreeRTOS, only osif bare-metal variant is applicable:

Platform      | FreeRTOS support
------------- | -----------
S32K11x       | No
S32K14x       | Yes
MPC5746C      | Yes
MPC5748G      | Yes
MPC5744P      | Yes

## Bare-metal ##

To integrate the bare-metal OSIF variant:
 - compile and link the osif_baremetal.c file
 - define a project-wide compile symbol: USING_OS_BAREMETAL. Note: this symbol is optional
as the default behavior is to assume a bare-metal environment. But this symbol is recommended
in case a future implementation of OSIF will depend on it.

Mutex operations are dummy operations (always return success) and semaphore is
implemented as a simple counter.

### Hardware resources ###

Bare-metal OSIF uses a hardware timer to accurately measure time. The timer and channel
used are platform-dependent, are chosen to be the same as the FreeRTOS implementation if possible.

The table below shows which timers and channels are used on each platform:

Platform      | Timer       | Channel
------------- | ----------- | ------------
S32K11x       | Systick     | N/A
S32K14x       | Systick     | N/A
MPC5746C      | PIT         | 15
MPC5748G      | PIT         | 15
MPC5744P      | PIT         | 3

### Bare-metal timing limitations ###

For bare-metal OSIF, the timer is initialized at the first call in OSIF that needs
timing. That is either ::OSIF_TimeDelay, ::OSIF_MutexLock or ::OSIF_SemaWait (functions with timeout).
The timer configuration, but not the counter, is updated at each subsequent call to these functions.

Do not assume ::OSIF_GetMilliseconds will return a global value since system initialization. It will return the
global value since the very first timer initialization, mentioned above.

*/
